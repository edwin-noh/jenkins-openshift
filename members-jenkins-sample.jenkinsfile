String CLUSTER = "openshift"
String PROJECT = "jenkins"

String SONAR_HOST_URL = "http://sonarqube-sonarqube.sonarqube.svc.cluster.local:9000"
String SONAR_PROJECT_KEY = "members"
String SONAR_TOKEN = "squ_787d552946802ab60eb36acf8e13eddff20feb41"
String SONAR_SOURCES = "src/main"
String SONAR_TESTS = "src/test"
String SONAR_EXCLUSIONS = "**/main/resources/db/**"
String SONAR_JAVA_BINARIES = "./build/"

String IMAGE_NAME = "springboot-sample"
String NEW_VERSION = "1.0"
String BC_NAME = "test"

pipeline {
    agent {
        node {
            label 'gradle' 
        }
    }
    stages {
        stage('Create Image') {
            steps {
                container('buildah') {
                    script {
                        try {
                            // Build with docker
                            // Build Source
                            
                            sh '''
                            cat << EOF > Dockerfile
                            FROM quay.apps.ocp4-hub.edwin.home/members/openjdk-17:1.20
                            ARG JAR_FILE=./README.md
                            COPY ${JAR_FILE} /deployments/app.jar
                            ENTRYPOINT ["java","-jar","/deployments/app.jar"]
                            ic'''
                            sh "ls -al"
                            sh "cat Dockerfile"
                            sh "buildah bud --format=oci --tls-verify=false -t test:1.0 -f ./Dockerfile ."

                            // sh '''
                            // buildah login -u ${DOCKERHUB_CREDENTIALS_USR} -p ${DOCKERHUB_CREDENTIALS_PSW} docker.io
                            // buildah push your-docker-image-name:${env.BUILD_ID} docker://docker.io/your-docker-image-name:${env.BUILD_ID}
                            // buildah push your-docker-image-name:${env.BUILD_ID} docker://docker.io/your-docker-image-name:latest
                            // '''
                            env.buildSourceResult = true
                        }
                        catch(Exception e) {
                            currentBuild.result = 'FAILURE'
                        }
                    }
                }              
            }
        }
        stage('checkout') {
            // when {
            //     expression {
            //         return env.preambleResult ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/
            //     }
            // }
            steps {            
                script {
                    try {
                        //git branch: "${SRC_REPO_BRANCH}", url: "https://bitbucket.org/kyobobook/${SRC_REPO_NAME}.git", credentialsId: "bitbucket-credentials"
                        git url: 'https://gitlab.consulting.redhat.com/edwin-projects/springboot-sample.git', branch: 'main', credentialsId: "rh-gitlab"

                        GIT_COMMIT = sh(returnStdout: true, script: "git rev-parse HEAD").trim()
                        
                        // def commitMessage = executeCmdReturn('git log -1 --pretty=%B ${git_commit}').split(' ')
                        //JIRA_ISSUE_KEY = commitMessage[0]

                        //addComment("빌드가 시작되었습니다.")
                        

                        env.gitCloneResult = true
                    }
                    catch(Exception e) {
                        //cleanWs()
                        //PrintErrorMessage(e)
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
        stage('Build Source') {
            // when {
            //     expression {
            //         return env.gitCloneResult ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/
            //     }
            // }
            steps {
                container('gradle') {
                    script {
                        try {
                            // Build Source
                            //sh "gradle build -x test --stacktrace"
                            // sh "gradle build -PnexusURL='${NEXUS_URL}' -x test --stacktrace"
                            sh "ls -al"
                            sh 'echo ${GRADLE_HOME}'
                            sh 'ls -al /opt/gradle'
                            sh "pwd"
                            // sh "gradle --version"
                            // sh 'which gradle'
                            sh 'id'
                            sh "gradle build -x test --stacktrace -g .gradle -Dorg.gradle.daemon=false -Dorg.gradle.parallel=false"
                            env.buildSourceResult = true
                        }
                        catch(Exception e) {
                            // addComment("Build Source 스테이지에서 실패했습니다.")
                            // cleanWs()
                            // PrintErrorMessage(e)
                            currentBuild.result = 'FAILURE'
                        }
                    }
                }                
            }

        }
        // stage('Code Analysis') {
        //     environment {
        //         SONAR_USER_HOME = './'
        //     }
        //     steps {
        //         container('sonar-cli') {
        //             script {
        //                 try {
        //                     sh "sonar-scanner -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.login=${SONAR_TOKEN} -Dsonar.sources=${SONAR_SOURCES} -Dsonar.tests=${SONAR_TESTS} -Dsonar.exclusions=${SONAR_EXCLUSIONS} -Dsonar.java.binaries=${SONAR_JAVA_BINARIES} -Dsonar.working.directory=.sonar"
        //                     env.buildSourceResult = true
        //                 }
        //                 catch(Exception e) {
        //                     // addComment("Build Source 스테이지에서 실패했습니다.")
        //                     // cleanWs()
        //                     // PrintErrorMessage(e)
        //                     currentBuild.result = 'FAILURE'
        //                 }
        //             }
        //         }
        //     }
        // }
        stage('Build Image') {
            steps {
                container('docker') {
                    script {
                        try {
                            
                            

                            //https://github.com/jenkinsci/openshift-client-plugin?tab=readme-ov-file#creating-objects-easier-than-you-were-expecting-hopefully
                            // def buildConfig = ["kind": "BuildConfig", "metadata": ["name": "${BC_NAME}"]]

                            // sh """
                            // cat << EOF > buildConfig.yaml
                            // kind: BuildConfig
                            // apiVersion: build.openshift.io/v1
                            // metadata:
                            // name: ${BC_NAME}
                            // spec:
                            // successfulBuildsHistoryLimit: 5
                            // failedBuildsHistoryLimit: 5
                            // output:
                            //     to:
                            //     kind: ImageStreamTag
                            //     name: ${IMAGE_NAME}:${NEW_VERSION}
                            //     namespace: ${PROJECT}
                            // strategy:
                            //     type: Source
                            //     sourceStrategy:
                            //     from:
                            //         kind: ImageStreamTag
                            //         namespace: openshift
                            //         name: openjdk-11-rhel8:1.0
                            // source:
                            //     type: Binary
                            //     binary: {}
                            // EOF
                            // """
                            // Build with Build Config
                            // openshift.withCluster("${CLUSTER}") {
                            //     openshift.withProject("${PROJECT}") {
                            //         try {
                            //             def bc = openshift.selector("bc", "${BC_NAME}").object()
                            //         } catch(Exception ex) {

                            //         }
                                    
                            //     }
                            // }
                            

                            env.buildSourceResult = true
                        }
                        catch(Exception e) {
                            // addComment("Build Source 스테이지에서 실패했습니다.")
                            // cleanWs()
                            // PrintErrorMessage(e)
                            currentBuild.result = 'FAILURE'
                        }
                    }
                }              
            }

        }
    }
}